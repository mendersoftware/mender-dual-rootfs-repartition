#!/bin/bash

set -e

usage() {
    cat <<EOF
$(basename "$0") [arguments] [--] [mender-artifact arguments]

--arm
	Build for ARM platform
--x86_64
	Build for x86-64 platform
--debug-tty
	Specify a /dev/tty* device which will be used on the device for
	debugging output. If this is not specified, one will be selected
	automatically, usually /dev/tty1

Either --arm or --x86_64 is mandatory.

EOF
    exit 1
}

PLATFORM=arm

while [ -n "$1" ]; do
    case "$1" in
        --arm)
            PLATFORM=arm
            ;;
        --x86_64)
            PLATFORM=x86_64
            ;;
        --debug-tty)
            shift
            DEBUG_TTY="$1"
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Unrecognized argument: $1" 1>&2
            usage
            ;;
    esac
    shift
done

set -e -o pipefail

cp src/mender_grubenv_defines grub-mender-grubenv
(
    cd grub-mender-grubenv
    make

    rm -rf tmp
    mkdir -p tmp
    make DESTDIR=tmp BOOT_DIR=/ install-boot-files
    ( cd tmp && tar czf ../grub-mender-grubenv.tar.gz . )
    rm -rf tmp
)

(
    mkdir -p downloads
    cd downloads

    if [ $PLATFORM = arm ]; then
        rm -rf debian-tmp
        mkdir -p debian-tmp
        docker create --name mender-dual-rootfs-repartition-tmp arm32v7/debian
        docker cp -a mender-dual-rootfs-repartition-tmp:/ debian-tmp/
        docker rm mender-dual-rootfs-repartition-tmp
        ( cd debian-tmp && tar --owner=root --group=root -czf ../debian-arm.tar.gz . )
        rm -rf debian-tmp

        curl -z busybox-arm -o busybox-arm https://www.busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-armv6l
        curl -z grub-efi-bootarm.efi -o grub-efi-bootarm.efi https://d1b0l86ne08fsf.cloudfront.net/mender-convert/grub-efi/arm/grub-efi-bootarm.efi
    else
        rm -rf debian-tmp
        mkdir -p debian-tmp
        docker create --name mender-dual-rootfs-repartition-tmp debian
        docker cp -a mender-dual-rootfs-repartition-tmp:/ debian-tmp/
        docker rm mender-dual-rootfs-repartition-tmp
        ( cd debian-tmp && tar --owner=root --group=root -czf ../debian-x86_64.tar.gz . )
        rm -rf debian-tmp

        curl -z busybox-x86_64 -o busybox-x86_64 https://www.busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-x86_64
        curl -z grub-efi-bootx64.efi -o grub-efi-bootx64.efi https://d1b0l86ne08fsf.cloudfront.net/mender-convert/grub-efi/x86-64/grub-efi-bootx64.efi
    fi

    chmod ugo+x busybox-*
)

(
    rm -rf payload
    mkdir -p payload
    cd payload

    cp ../downloads/debian-$PLATFORM.tar.gz debian.tar.gz

    mkdir -p takeover.sh
    # Explicitly use wildcard to omit .git directory.
    cp ../takeover.sh/* takeover.sh

    if [ $PLATFORM = arm ]; then
        arm-linux-gnueabihf-gcc -static takeover.sh/fakeinit.c -o takeover.sh/fakeinit
    else
        gcc -static takeover.sh/fakeinit.c -o takeover.sh/fakeinit
    fi

    # Unfortunately minimal Debian installs don't come with mkfs.vfat, so we
    # need to build the whole image here and include that instead.
    dd if=/dev/zero of=boot-part.vfat bs=1M seek=16 count=0
    mkfs.vfat -n Boot boot-part.vfat
    rm -rf tmp
    mkdir -p tmp
    (
        cd tmp
        mkdir -p EFI/BOOT
        case "$PLATFORM" in
            arm)
                cp ../../downloads/grub-efi-bootarm.efi EFI/BOOT/bootarm.efi
                ;;
            x86_64)
                cp ../../downloads/grub-efi-bootx64.efi EFI/BOOT/bootx64.efi
                ;;
            *)
                echo "Unknown platform"
                exit 1
                ;;
        esac
        tar xzf ../../grub-mender-grubenv/grub-mender-grubenv.tar.gz
        rm -f ../../grub-mender-grubenv/grub-mender-grubenv.tar.gz
    )
    mcopy -i boot-part.vfat -s tmp/* ::/
    rm -rf tmp
    gzip boot-part.vfat

    (
        cd takeover.sh

        mv ../boot-part.vfat.gz .
        cp ../../downloads/busybox-$PLATFORM busybox

        for patch in ../../patches/*.patch; do
            patch -p1 --batch --no-backup-if-mismatch < $patch
        done
        cp ../../src/dual-rootfs-repartition.sh .
        echo 'exec /bin/bash /dual-rootfs-repartition.sh' >> takeover.sh

        tar --owner=root --group=root -czf ../takeover.sh.tar.gz .
    )

    rm -rf takeover.sh
)

if [ -n "$DEBUG_TTY" ]; then
    echo "DEBUG_TTY=\"$DEBUG_TTY\"" > env.sh
    METADATA_ARGS="-f env.sh"
else
    METADATA_ARGS=
fi

mender-artifact write module-image \
    -n dual-rootfs-repartition \
    -t beaglebone \
    -T dual-rootfs-repartition \
    $METADATA_ARGS \
    -f payload/debian.tar.gz \
    -f payload/takeover.sh.tar.gz \
    "$@"

rm -f env.sh

echo "Succeeded!"
